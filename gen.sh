#!/bin/bash

echo "Cross-User Event Generator for WebSocket Sniffer"
echo "================================================"
echo "This script generates events as both testuser and admin"
echo ""

# Function to generate events for a user
generate_events() {
    local USERNAME=$1
    local PASSWORD=$2
    local USER_TYPE=$3
    local PROJECT_ID=$4
    
    echo ""
    echo "Getting authentication token for $USERNAME ($USER_TYPE)..."
    TOKEN=$(curl -s -X POST http://localhost:9000/api/v1/auth \
      -H "Content-Type: application/json" \
      -d "{\"type\": \"normal\", \"username\": \"$USERNAME\", \"password\": \"$PASSWORD\"}" | \
      jq -r '.auth_token')
    
    if [ "$TOKEN" = "null" ] || [ -z "$TOKEN" ]; then
        echo "Failed to get token for $USERNAME. Skipping..."
        return 1
    fi
    
    echo "Got token for $USERNAME: ${TOKEN:0:20}..."
    
    TIMESTAMP=$(date '+%Y-%m-%d %H:%M:%S')
    
    echo ""
    echo "Generating events as $USERNAME ($USER_TYPE)..."
    
    # Update project
    echo "Updating project description as $USERNAME..."
    curl -s -X PATCH http://localhost:9000/api/v1/projects/$PROJECT_ID \
      -H "Authorization: Bearer $TOKEN" \
      -H "Content-Type: application/json" \
      -d "{\"description\": \"[$USER_TYPE] Updated by $USERNAME at $TIMESTAMP\"}" > /dev/null
    echo "Project updated by $USERNAME"
    
    # Create user story
    echo "Creating user story as $USERNAME..."
    curl -s -X POST http://localhost:9000/api/v1/userstories \
      -H "Authorization: Bearer $TOKEN" \
      -H "Content-Type: application/json" \
      -d "{\"subject\": \"[$USER_TYPE] Story by $USERNAME $TIMESTAMP\", \"description\": \"Created by $USERNAME at $TIMESTAMP\", \"project\": $PROJECT_ID}" > /dev/null
    echo "User story created by $USERNAME"
    
    # Create task
    echo "Creating task as $USERNAME..."
    curl -s -X POST http://localhost:9000/api/v1/tasks \
      -H "Authorization: Bearer $TOKEN" \
      -H "Content-Type: application/json" \
      -d "{\"subject\": \"[$USER_TYPE] Task by $USERNAME $TIMESTAMP\", \"description\": \"Created by $USERNAME at $TIMESTAMP\", \"project\": $PROJECT_ID}" > /dev/null
    echo "Task created by $USERNAME"
    
    # Create issue
    echo "Creating issue as $USERNAME..."
    curl -s -X POST http://localhost:9000/api/v1/issues \
      -H "Authorization: Bearer $TOKEN" \
      -H "Content-Type: application/json" \
      -d "{\"subject\": \"[$USER_TYPE] Issue by $USERNAME $TIMESTAMP\", \"description\": \"Created by $USERNAME at $TIMESTAMP\", \"project\": $PROJECT_ID}" > /dev/null
    echo "Issue created by $USERNAME"
    
    echo "Events generated by $USERNAME ($USER_TYPE)"
}

# Get project ID (try to find an existing project or use default)
echo "Finding project to use for testing..."
ADMIN_TOKEN=$(curl -s -X POST http://localhost:9000/api/v1/auth \
  -H "Content-Type: application/json" \
  -d '{"type": "normal", "username": "admin", "password": "admin"}' | \
  jq -r '.auth_token')

if [ "$ADMIN_TOKEN" != "null" ] && [ -n "$ADMIN_TOKEN" ]; then
    # Get list of projects
    PROJECTS=$(curl -s -X GET "http://localhost:9000/api/v1/projects" \
      -H "Authorization: Bearer $ADMIN_TOKEN")
    
    PROJECT_ID=$(echo "$PROJECTS" | jq -r '.[0].id // empty')
    
    if [ -n "$PROJECT_ID" ] && [ "$PROJECT_ID" != "null" ]; then
        echo "Using existing project ID: $PROJECT_ID"
    else
        echo "No existing projects found, using default project ID: 1"
        PROJECT_ID=1
    fi
else
    echo "Could not get admin token, using default project ID: 1"
    PROJECT_ID=1
fi

echo ""
echo "1: Generating events as TESTUSER (Regular User)"
echo "====================================================="
generate_events "testuser" "password123" "REGULAR_USER" "$PROJECT_ID"

echo ""
echo "Waiting 10 seconds before admin phase..."
sleep 10

echo ""
echo "2: Generating events as ADMIN (Superuser)"
echo "==============================================="
generate_events "admin" "admin" "ADMIN" "$PROJECT_ID"
